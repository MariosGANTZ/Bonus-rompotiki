import cv2
import mediapipe as mp
import numpy as np

mp_hands   = mp.solutions.hands
mp_drawing = mp.solutions.drawing_utils

THUMB_MCP     = mp_hands.HandLandmark.THUMB_MCP.value
INDEX_MCP     = mp_hands.HandLandmark.INDEX_FINGER_MCP.value
INDEX_TIP     = mp_hands.HandLandmark.INDEX_FINGER_TIP.value
THUMB_TIP     = mp_hands.HandLandmark.THUMB_TIP.value

saved_axes = []

cap = cv2.VideoCapture(0)
with mp_hands.Hands(
        max_num_hands=1,
        min_detection_confidence=0.7,
        min_tracking_confidence=0.7
    ) as hands:

    while cap.isOpened():
        ret, frame = cap.read()
        if not ret:
            break

        frame = cv2.flip(frame, 1)
        h, w, _ = frame.shape

        for orig, xd, yd, zd, scl in saved_axes:
            for vec, color in zip((xd, yd, zd),
                                  ((255, 0, 0), (0, 255, 0), (0, 0, 255))):
                end = (orig + vec * scl).astype(int)
                o2  = orig.astype(int)
                cv2.arrowedLine(frame,
                                tuple(o2[:2]),
                                tuple(end[:2]),
                                color, thickness=3, tipLength=0.3)

        rgb     = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        results = hands.process(rgb)
        live_axes = None

        if results.multi_hand_landmarks:
            lm = results.multi_hand_landmarks[0].landmark

            def get_point(idx):
                p = lm[idx]
                return np.array([p.x * w, p.y * h, p.z * w], dtype=np.float32)

            origin    = get_point(THUMB_MCP)
            idx_base  = get_point(INDEX_MCP)
            idx_tip   = get_point(INDEX_TIP)
            thumb_tip = get_point(THUMB_TIP)

            x_dir = idx_base - origin
            x_dir /= np.linalg.norm(x_dir)

            z_raw = thumb_tip - origin
            z_raw -= np.dot(z_raw, x_dir) * x_dir
            z_dir = z_raw / np.linalg.norm(z_raw)

            # Y = Z Ã— X
            y_dir = np.cross(z_dir, x_dir)
            y_dir /= np.linalg.norm(y_dir)

            scale = np.linalg.norm(idx_tip - idx_base) * 0.5

            live_axes = (origin, x_dir, y_dir, z_dir, scale)

            for vec, color in zip((x_dir, y_dir, z_dir),
                                  ((255, 0, 0), (0, 255, 0), (0, 0, 255))):
                end = (origin + vec * scale).astype(int)
                o2  = origin.astype(int)
                cv2.arrowedLine(frame,
                                tuple(o2[:2]),
                                tuple(end[:2]),
                                color, thickness=5, tipLength=0.3)

            cv2.circle(frame, tuple(origin[:2].astype(int)), 5, (0, 0, 0), -1)
            mp_drawing.draw_landmarks(frame,
                                      results.multi_hand_landmarks[0],
                                      mp_hands.HAND_CONNECTIONS)

        cv2.putText(frame,
                    "Press 'c' to stick axes   |   ESC/Q to quit",
                    (10, 30), cv2.FONT_HERSHEY_SIMPLEX,
                    0.7, (255, 255, 255), 2, cv2.LINE_AA)

        cv2.imshow("Hand Axes on Fingers", frame)
        key = cv2.waitKey(1) & 0xFF

        if key == ord('c') and live_axes is not None:
            saved_axes.append(live_axes)
        elif key in (27, ord('q')):
            break

cap.release()
cv2.destroyAllWindows()
